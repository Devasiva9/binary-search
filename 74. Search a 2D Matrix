class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return false;
        }

        int rows = matrix.length;
        int cols = matrix[0].length;
        int row = 0;
        int col = cols - 1; // Start from the top-right corner

        while (row < rows && col >= 0) {
            if (matrix[row][col] == target) {
                return true; // Found the target
            } else if (matrix[row][col] > target) {
                col--; // Move left
            } else {
                row++; // Move down
            }
        }

        return false; // Target not found
    }
}

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Execution of searchMatrix
Initialization:

rows = matrix.length = 3 (number of rows)
cols = matrix[0].length = 4 (number of columns)
Start position: row = 0, col = cols - 1 = 3 (top-right corner)
Search Loop:

Iteration 1:
Check matrix[0][3] (value 7). Since 7 > 3, move left: col--.
Now at matrix[0][2] (value 5).
Iteration 2:
Check matrix[0][2] (value 5). Since 5 > 3, move left: col--.
Now at matrix[0][1] (value 3).
Iteration 3:
Check matrix[0][1] (value 3). Since 3 == 3, return true.
